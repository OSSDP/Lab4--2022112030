# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven and Automatic Merge
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Run tests with Maven
      run: mvn -B test --file pom.xml
    - name: Build with Maven
      run: mvn -B package --file pom.xml

  auto-merge:
    needs: build
    runs-on: ubuntu-latest
    # Only run auto-merge for pull requests
    if: github.event_name == 'pull_request'
    steps:
    - name: Merge pull request
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          // Check if the build job was successful
          const checkRuns = await github.rest.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.payload.pull_request.head.sha
          });

          const allChecksPassed = checkRuns.data.check_runs.every(
            run => run.conclusion === 'success'
          );

          // Additional conditions for merging (optional)
          const isApproved = context.payload.pull_request.reviews.some(
            review => review.state === 'APPROVED'
          );

          // Merge the PR if all checks pass
          if (allChecksPassed) {
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              merge_method: 'squash' // You can change this to 'merge' or 'rebase'
            });
          }

